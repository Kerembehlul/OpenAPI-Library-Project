openapi: 3.0.3
info:
  title: Online Kütüphane API
  description: Bir üniversiteye ait çevrim içi kütüphane sistemine yönelik RESTful API tanımı.
  version: 1.0.0
servers:
  - url: http://localhost:8080/api
    description: Local test server

paths:
  /books:
    get:
      tags: [Books]
      summary: Tüm kitapları getir
      description: Sayfalama destekli kitap listesini döner.
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
      responses:
        '200':
          description: Kitap listesi başarıyla getirildi.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      tags: [Books]
      summary: Yeni kitap ekle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
            example:
              id: "b123"
              title: "Yapay Zeka 101"
              author: "Ali Veli"
              isbn: "978-3-16-148410-0"
              publisher: "Kütüphane Yayınları"
              pageCount: 320
              stock: 5
      responses:
        '201':
          description: Kitap başarıyla eklendi.

  /books/{id}:
    get:
      tags: [Books]
      summary: Tek bir kitabı getir
      parameters:
        - $ref: '#/components/parameters/BookId'
      responses:
        '200':
          description: Kitap bulundu.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      tags: [Books]
      summary: Kitap güncelle
      parameters:
        - $ref: '#/components/parameters/BookId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: Kitap güncellendi.
    delete:
      tags: [Books]
      summary: Kitap sil
      parameters:
        - $ref: '#/components/parameters/BookId'
      responses:
        '204':
          description: Kitap silindi.

  /students:
    get:
      tags: [Students]
      summary: Öğrenci listesini getir
      responses:
        '200':
          description: Öğrenciler listelendi.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
    post:
      tags: [Students]
      summary: Yeni öğrenci ekle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
      responses:
        '201':
          description: Öğrenci oluşturuldu.

  /students/{id}:
    get:
      tags: [Students]
      summary: Tek öğrenci getir
      parameters:
        - $ref: '#/components/parameters/StudentId'
      responses:
        '200':
          description: Öğrenci bulundu.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
    put:
      tags: [Students]
      summary: Öğrenci güncelle
      parameters:
        - $ref: '#/components/parameters/StudentId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
      responses:
        '200':
          description: Öğrenci güncellendi.
    delete:
      tags: [Students]
      summary: Öğrenci sil
      parameters:
        - $ref: '#/components/parameters/StudentId'
      responses:
        '204':
          description: Öğrenci silindi.

  /loans:
    get:
      tags: [Loans]
      summary: Ödünç alma kayıtlarını getir
      responses:
        '200':
          description: Ödünç kayıtları listelendi.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Loan'
    post:
      tags: [Loans]
      summary: Kitap ödünç al
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Loan'
      responses:
        '201':
          description: Kitap ödünç verildi.

  /loans/{id}:
    get:
      tags: [Loans]
      summary: Tek ödünç kayıt bilgisi getir
      parameters:
        - $ref: '#/components/parameters/LoanId'
      responses:
        '200':
          description: Kayıt bulundu.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Loan'

  /loans/{id}/return:
    patch:
      tags: [Loans]
      summary: Kitabı iade et
      parameters:
        - $ref: '#/components/parameters/LoanId'
      responses:
        '200':
          description: Kitap iade edildi.

components:
  parameters:
    BookId:
      name: id
      in: path
      required: true
      description: Kitap ID'si
      schema:
        type: string
    StudentId:
      name: id
      in: path
      required: true
      description: Öğrenci ID'si
      schema:
        type: string
    LoanId:
      name: id
      in: path
      required: true
      description: Ödünç alma ID'si
      schema:
        type: string
    PageParam:
      name: page
      in: query
      required: false
      description: Sayfa numarası
      schema:
        type: integer
        default: 1
    SizeParam:
      name: size
      in: query
      required: false
      description: Sayfa başına öğe sayısı
      schema:
        type: integer
        default: 10

  schemas:
    Book:
      type: object
      required: [id, title, author, isbn, publisher, pageCount, stock]
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        author:
          type: string
        isbn:
          type: string
          format: isbn-13
        publisher:
          type: string
        pageCount:
          type: integer
        stock:
          type: integer

    Student:
      type: object
      required: [id, name, studentNumber, email, isActive]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        studentNumber:
          type: string
        email:
          type: string
          format: email
        isActive:
          type: boolean

    Loan:
      type: object
      required: [id, studentId, bookId, loanDate, status]
      properties:
        id:
          type: string
          format: uuid
        studentId:
          type: string
        bookId:
          type: string
        loanDate:
          type: string
          format: date
        returnDate:
          type: string
          format: date
          nullable: true
        status:
          type: string
          enum: [ongoing, returned, late]

  responses:
    NotFound:
      description: Kaynak bulunamadı
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
                example: "Kaynak bulunamadı."
